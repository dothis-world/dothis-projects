export declare const c: {
    router: <T extends import("@ts-rest/core").AppRouter>(endpoints: { [K in keyof T]: T[K] extends import("@ts-rest/core").AppRoute ? T[K] : T[K] extends import("@ts-rest/core").AppRouter ? T[K] extends infer T_1 extends import("@ts-rest/core").AppRouter ? { [K_1 in keyof T_1]: T[K][K_1] extends import("@ts-rest/core").AppRoute ? T[K][K_1] : T[K][K_1] extends import("@ts-rest/core").AppRouter ? T[K][K_1] extends infer T_2 extends import("@ts-rest/core").AppRouter ? { [K_2 in keyof T_2]: T[K][K_1][K_2] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2] : T[K][K_1][K_2] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2] extends infer T_3 extends import("@ts-rest/core").AppRouter ? { [K_3 in keyof T_3]: T[K][K_1][K_2][K_3] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3] : T[K][K_1][K_2][K_3] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3] extends infer T_4 extends import("@ts-rest/core").AppRouter ? { [K_4 in keyof T_4]: T[K][K_1][K_2][K_3][K_4] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4] : T[K][K_1][K_2][K_3][K_4] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4] extends infer T_5 extends import("@ts-rest/core").AppRouter ? { [K_5 in keyof T_5]: T[K][K_1][K_2][K_3][K_4][K_5] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5] : T[K][K_1][K_2][K_3][K_4][K_5] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4][K_5] extends infer T_6 extends import("@ts-rest/core").AppRouter ? { [K_6 in keyof T_6]: T[K][K_1][K_2][K_3][K_4][K_5][K_6] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5][K_6] : T[K][K_1][K_2][K_3][K_4][K_5][K_6] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4][K_5][K_6] extends infer T_7 extends import("@ts-rest/core").AppRouter ? { [K_7 in keyof T_7]: T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7] : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7] extends infer T_8 extends import("@ts-rest/core").AppRouter ? { [K_8 in keyof T_8]: T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8] : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8] extends infer T_9 extends import("@ts-rest/core").AppRouter ? { [K_9 in keyof T_9]: T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9] : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9] extends import("@ts-rest/core").AppRouter ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9] extends infer T_10 extends import("@ts-rest/core").AppRouter ? { [K_10 in keyof T_10]: T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9][K_10] extends import("@ts-rest/core").AppRoute ? T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9][K_10] : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9][K_10] extends import("@ts-rest/core").AppRouter ? any : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9][K_10]; } : never : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8][K_9]; } : never : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7][K_8]; } : never : T[K][K_1][K_2][K_3][K_4][K_5][K_6][K_7]; } : never : T[K][K_1][K_2][K_3][K_4][K_5][K_6]; } : never : T[K][K_1][K_2][K_3][K_4][K_5]; } : never : T[K][K_1][K_2][K_3][K_4]; } : never : T[K][K_1][K_2][K_3]; } : never : T[K][K_1][K_2]; } : never : T[K][K_1]; } : never : T[K]; }) => T;
    query: <T_11 extends import("@ts-rest/core").AppRouteQuery>(query: T_11) => T_11;
    mutation: <T_12 extends import("@ts-rest/core").AppRouteMutation>(mutation: T_12) => T_12;
    response: <T_13>() => T_13;
    body: <T_14>() => T_14;
};
//# sourceMappingURL=contract.d.ts.map