name: CI-CD

on:
  pull_request:
    branches: [deploy]

jobs:
  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: build

  build:
    name: Build, Deploy to S3 Bucket
    runs-on: ubuntu-latest

    env:
      working-directory: ./

    strategy:
      matrix:
        node-version: [18.13.0]

    steps:
      - name: Git Checkout
        uses: actions/checkout@v3

      - name: create env file
        working-directory: ./apps/server
        run: |
            pwd
            touch production.env
            echo MYSQL_ROOT_USER=${{ secrets.MYSQL_ROOT_USER }} >> production.env
            echo MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} >> production.env
            echo MYSQL_USER=${{ secrets.MYSQL_USER }} >> production.env
            echo MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} >> production.env
            echo PORT=${{ secrets.PORT }} >> production.env
            echo DB_PORT=${{ secrets.DB_PORT }} >> production.env
            echo DB_HOST=${{ secrets.DB_HOST }} >> production.env
            echo DB_SCHEMA=${{ secrets.DB_SCHEMA }} >> production.env
            echo GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} >> production.env
            echo GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} >> production.env
            echo GOOGLE_APIKEY=${{ secrets.GOOGLE_APIKEY }} >> production.env
            echo JWT_SECRET=${{ secrets.JWT_SECRET }} >> production.env
            echo ACCESS_TOKEN_EXPIRESIN=${{ secrets.ACCESS_TOKEN_EXPIRESIN }} >> production.env
            echo REFRESH_TOKEN_EXPIRESIN=${{ secrets.REFRESH_TOKEN_EXPIRESIN }} >> production.env
            echo REDIS_PORT=${{ secrets.REDIS_PORT }} >> production.env
            echo REDIS_HOSTNAME=${{ secrets.REDIS_HOSTNAME }} >> production.env
            echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> production.env
            echo AWS_CREDENTIAL_KEY=${{ secrets.AWS_CREDENTIAL_KEY }} >> production.env
            echo AWS_CREDENTIAL_SECRET=${{ secrets.AWS_CREDENTIAL_SECRET }} >> production.env
            echo AWS_REGION=${{ secrets.AWS_REGION }} >> production.env
            echo NODE_PATH=${{ secrets.NODE_PATH }} >> production.env
            cat production.env

      - name: zip file
        working-directory: ./
        run: zip -r dothisBackEnd.zip ./ -x "./apps/dashboard-web/**" -x "./apps/request-web/**" -x "./packages/share/**" -x "./packages/ui/**"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        working-directory: ./
        run: aws s3 cp --region ap-northeast-2 ./dothisBackEnd.zip ${{ secrets.AWS_S3_BUCKET_NAME }}

      - name: deploy with AWS codeDeploy
        working-directory: ./
        run: aws deploy create-deployment
          --application-name github-action
          --deployment-config-name CodeDeployDefault.OneAtATime
          --deployment-group-name github-action-group
          --s3-location bucket=dothis,bundleType=zip,key=git-archive/dothisBackEnd.zip

#      - uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - name: 'Qodana Scan'
#        uses: JetBrains/qodana-action@v2022.3.0
